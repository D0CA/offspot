/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Container } from "@pixi/display";
import { IArmatureProxy, Armature } from "../armature";
import { EventStringType, EventObject } from "../event";
import { Animation } from "../animation";
declare type PixiArmatureDisplayObjectEvents = {
    [x in EventStringType]: [event: EventObject];
};
declare global {
    namespace GlobalMixins {
        interface DisplayObjectEvents extends PixiArmatureDisplayObjectEvents {
        }
    }
}
/**
 * @inheritDoc
 */
export declare class PixiArmatureDisplay extends Container implements IArmatureProxy {
    /**
     * @private
     */
    debugDraw: boolean;
    private _debugDraw;
    private _armature;
    private _debugDrawer;
    private _debugDrawerChildren;
    /**
     * @inheritDoc
     */
    dbInit(armature: Armature): void;
    /**
     * @inheritDoc
     */
    dbClear(): void;
    /**
     * @inheritDoc
     */
    dbUpdate(): void;
    /**
     * @inheritDoc
     */
    dispose(disposeProxy?: boolean): void;
    /**
     * @inheritDoc
     */
    destroy(): void;
    /**
     * @private
     */
    dispatchDBEvent(type: EventStringType, eventObject: EventObject): void;
    /**
     * @inheritDoc
     */
    hasDBEventListener(type: EventStringType): boolean;
    /**
     * @inheritDoc
     */
    addDBEventListener(type: EventStringType, listener: (event: EventObject) => void, target: any): void;
    /**
     * @inheritDoc
     */
    removeDBEventListener(type: EventStringType, listener: (event: EventObject) => void, target: any): void;
    /**
     * @inheritDoc
     */
    get armature(): Armature;
    /**
     * @inheritDoc
     */
    get animation(): Animation;
}
export {};
